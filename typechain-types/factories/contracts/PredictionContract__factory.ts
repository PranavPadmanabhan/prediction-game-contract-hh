/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  PredictionContract,
  PredictionContractInterface,
} from "../../contracts/PredictionContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "addresses",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "entranceFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Admin_Withdraw_Failed",
    type: "error",
  },
  {
    inputs: [],
    name: "Prediction__Limit_Exceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "Prediction__Not_Enough_Amount",
    type: "error",
  },
  {
    inputs: [],
    name: "Prediction__TopUp_error",
    type: "error",
  },
  {
    inputs: [],
    name: "Withdraw__Failed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "contestId",
        type: "uint256",
      },
    ],
    name: "ContestCancelled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "contestId",
        type: "uint256",
      },
    ],
    name: "ContestCompleted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "int256",
        name: "predictedValue",
        type: "int256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "predictedAt",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "difference",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "contestId",
        type: "uint256",
      },
    ],
    name: "NewPrediction",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "ResultAnnounced",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "TopUpSuccessfull",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "WithdrawSuccessfull",
    type: "event",
  },
  {
    inputs: [],
    name: "addFunds",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "contestId",
        type: "uint256",
      },
    ],
    name: "declareCompletetion",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "contestId",
        type: "uint256",
      },
    ],
    name: "getContest",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "priceFeedAddress",
            type: "address",
          },
        ],
        internalType: "struct PredictionContract.Contest",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "contestId",
        type: "uint256",
      },
    ],
    name: "getContestPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getContests",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "priceFeedAddress",
            type: "address",
          },
        ],
        internalType: "struct PredictionContract.Contest[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "contestId",
        type: "uint256",
      },
    ],
    name: "getLatestPrice",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumOfContests",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumOfMaxPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "contestId",
        type: "uint256",
      },
    ],
    name: "getPredictions",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "predictedValue",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "predictedAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "difference",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "user",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct PredictionContract.Prediction[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "contestId",
        type: "uint256",
      },
    ],
    name: "getWinners",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "contestId",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "_predictedValue",
        type: "int256",
      },
    ],
    name: "predict",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "addresses",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "rewards",
        type: "uint256[]",
      },
    ],
    name: "setReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawFunds",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60e06040526101f46006553480156200001757600080fd5b50604051620029813803806200298183398181016040528101906200003d9190620004b3565b426001819055508160a08181525050826002908051906020019062000064929190620001dc565b508060c081815250503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050620000b1620000ba60201b60201c565b50505062000614565b60005b600280549050811015620001d95760006040518060400160405280600184620000e791906200055d565b81526020016002848154811062000103576200010262000598565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050508080620001d090620005c7565b915050620000bd565b50565b82805482825590600052602060002090810192821562000258579160200282015b82811115620002575782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620001fd565b5b5090506200026791906200026b565b5090565b5b80821115620002865760008160009055506001016200026c565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002ee82620002a3565b810181811067ffffffffffffffff8211171562000310576200030f620002b4565b5b80604052505050565b6000620003256200028a565b9050620003338282620002e3565b919050565b600067ffffffffffffffff821115620003565762000355620002b4565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000399826200036c565b9050919050565b620003ab816200038c565b8114620003b757600080fd5b50565b600081519050620003cb81620003a0565b92915050565b6000620003e8620003e28462000338565b62000319565b905080838252602082019050602084028301858111156200040e576200040d62000367565b5b835b818110156200043b5780620004268882620003ba565b84526020840193505060208101905062000410565b5050509392505050565b600082601f8301126200045d576200045c6200029e565b5b81516200046f848260208601620003d1565b91505092915050565b6000819050919050565b6200048d8162000478565b81146200049957600080fd5b50565b600081519050620004ad8162000482565b92915050565b600080600060608486031215620004cf57620004ce62000294565b5b600084015167ffffffffffffffff811115620004f057620004ef62000299565b5b620004fe8682870162000445565b935050602062000511868287016200049c565b925050604062000524868287016200049c565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200056a8262000478565b9150620005778362000478565b92508282019050808211156200059257620005916200052e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000620005d48262000478565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036200060957620006086200052e565b5b600182019050919050565b60805160a05160c0516122f062000691600039600081816108a9015281816109cf0152610c5e0152600081816105360152818161057001528181610c840152818161105d0152818161114f015261120d01526000818161074a015281816107da01528181610a5001528181610b8e0152610de001526122f06000f3fe6080604052600436106101355760003560e01c806385eddeea116100ab578063b94fe9171161006f578063b94fe917146103fd578063bc01d98d1461043b578063bfaba76a14610464578063d27e80b51461048f578063d74497c9146104cc578063f1813d51146104f557610135565b806385eddeea14610337578063893d20e814610360578063904b9f721461038b57806391ad27b4146103c8578063a26759cb146103f357610135565b8063320229eb116100fd578063320229eb146102005780634585e33b1461022b5780636997bae9146102545780636b1426a41461027f5780636e04ff0d146102bc57806370a08231146102fa57610135565b806309bc33a71461013a578063117973691461016557806312b5834914610190578063155dd5ee146101bb5780632e1a7d4d146101d7575b600080fd5b34801561014657600080fd5b5061014f610532565b60405161015c9190611504565b60405180910390f35b34801561017157600080fd5b5061017a61055a565b6040516101879190611504565b60405180910390f35b34801561019c57600080fd5b506101a5610566565b6040516101b29190611504565b60405180910390f35b6101d560048036038101906101d0919061155f565b61056e565b005b3480156101e357600080fd5b506101fe60048036038101906101f9919061155f565b610748565b005b34801561020c57600080fd5b5061021561089d565b6040516102229190611504565b60405180910390f35b34801561023757600080fd5b50610252600480360381019061024d91906116d2565b6108a7565b005b34801561026057600080fd5b50610269610912565b6040516102769190611504565b60405180910390f35b34801561028b57600080fd5b506102a660048036038101906102a1919061155f565b61091c565b6040516102b3919061180b565b60405180910390f35b3480156102c857600080fd5b506102e360048036038101906102de91906116d2565b6109c9565b6040516102f19291906118c7565b60405180910390f35b34801561030657600080fd5b50610321600480360381019061031c9190611923565b610a05565b60405161032e9190611504565b60405180910390f35b34801561034357600080fd5b5061035e60048036038101906103599190611adb565b610a4e565b005b34801561036c57600080fd5b50610375610b8a565b6040516103829190611b62565b60405180910390f35b34801561039757600080fd5b506103b260048036038101906103ad919061155f565b610bb2565b6040516103bf9190611bbb565b60405180910390f35b3480156103d457600080fd5b506103dd610c5a565b6040516103ea9190611504565b60405180910390f35b6103fb610c82565b005b34801561040957600080fd5b50610424600480360381019061041f919061155f565b610d6d565b604051610432929190611c0b565b60405180910390f35b34801561044757600080fd5b50610462600480360381019061045d919061155f565b610dde565b005b34801561047057600080fd5b50610479610eec565b6040516104869190611d12565b60405180910390f35b34801561049b57600080fd5b506104b660048036038101906104b1919061155f565b610fab565b6040516104c39190611504565b60405180910390f35b3480156104d857600080fd5b506104f360048036038101906104ee9190611d60565b610fd4565b005b34801561050157600080fd5b5061051c6004803603810190610517919061155f565b6112c5565b6040516105299190611ec6565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b600047905090565b7f0000000000000000000000000000000000000000000000000000000000000000811080156105db5750600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481115b15610612576040517f3fb6985b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff168260405161063890611f19565b60006040518083038185875af1925050503d8060008114610675576040519150601f19603f3d011682016040523d82523d6000602084013e61067a565b606091505b50509050806106b5576040517f3fb6985b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107049190611f5d565b925050819055507f79d6154499fe61db70df5e974d6947219675596a035f25c56e2dc7575d04187a823360405161073c929190611f91565b60405180910390a15050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cd90612017565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168260405161081c90611f19565b60006040518083038185875af1925050503d8060008114610859576040519150601f19603f3d011682016040523d82523d6000602084013e61085e565b606091505b5050905080610899576040517f04b765d900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6000600154905090565b7f0000000000000000000000000000000000000000000000000000000000000000600154426108d69190611f5d565b1061090f57426001819055507f4341dddeeae96cb085a30b68a8c3e38b00f5b7c5ff4fa9f31079e5b41a9c69ad60405160405180910390a15b50565b6000600654905090565b60606004600060018461092f9190611f5d565b81526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156109bd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610973575b50505050509050919050565b600060607f0000000000000000000000000000000000000000000000000000000000000000600154426109fc9190611f5d565b10159150915091565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610adc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad390612017565b60405180910390fd5b60005b8251811015610b8557818181518110610afb57610afa612037565b5b602002602001015160056000858481518110610b1a57610b19612037565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b6b9190612066565b925050819055508080610b7d9061209a565b915050610adf565b505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610bba6114bb565b6000600183610bc99190611f5d565b81548110610bda57610bd9612037565b5b9060005260206000209060020201604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610cdc576040517f818f734e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d2b9190612066565b925050819055507f30235040a226b2e9a074ef96d790e10e9ce5f2be30aaf8049fda6a5e03f144273433604051610d63929190611f91565b60405180910390a1565b600080600080610dcd6000600187610d859190611f5d565b81548110610d9657610d95612037565b5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166113c1565b915091508181935093505050915091565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6390612017565b60405180910390fd5b60036000600183610e7d9190611f5d565b81526020019081526020016000208054905060076000600184610ea09190611f5d565b8152602001908152602001600020819055507ffba192deaecbe7fa98bd977ab6a41d5e30515950160612a6341b3f3477568f6881604051610ee19190611504565b60405180910390a150565b60606000805480602002602001604051908101604052809291908181526020016000905b82821015610fa25783829060005260206000209060020201604051806040016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190610f10565b50505050905090565b600060076000600184610fbe9190611f5d565b8152602001908152602001600020549050919050565b60076000600184610fe59190611f5d565b8152602001908152602001600020546006546110019190612066565b600360006001856110129190611f5d565b8152602001908152602001600020805490501061105b576040517fe45c23e700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156110f4576040517f39b4a2ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360006001846111059190611f5d565b81526020019081526020016000206040518060a00160405280838152602001428152602001600081526020013373ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015550507f0000000000000000000000000000000000000000000000000000000000000000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461127a9190611f5d565b925050819055507f3a63f877abc26c9d8968076e2171dea3f3e5da8cb52d749794ebe85aeb3c98928142600033866040516112b9959493929190612127565b60405180910390a15050565b6060600360006001846112d89190611f5d565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156113b657838290600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160048201548152505081526020019060010190611306565b505050509050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611411573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143591906121e6565b50505091505060008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ac919061228d565b90508181935093505050915091565b604051806040016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000819050919050565b6114fe816114eb565b82525050565b600060208201905061151960008301846114f5565b92915050565b6000604051905090565b600080fd5b600080fd5b61153c816114eb565b811461154757600080fd5b50565b60008135905061155981611533565b92915050565b60006020828403121561157557611574611529565b5b60006115838482850161154a565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6115df82611596565b810181811067ffffffffffffffff821117156115fe576115fd6115a7565b5b80604052505050565b600061161161151f565b905061161d82826115d6565b919050565b600067ffffffffffffffff82111561163d5761163c6115a7565b5b61164682611596565b9050602081019050919050565b82818337600083830152505050565b600061167561167084611622565b611607565b90508281526020810184848401111561169157611690611591565b5b61169c848285611653565b509392505050565b600082601f8301126116b9576116b861158c565b5b81356116c9848260208601611662565b91505092915050565b6000602082840312156116e8576116e7611529565b5b600082013567ffffffffffffffff8111156117065761170561152e565b5b611712848285016116a4565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061177282611747565b9050919050565b61178281611767565b82525050565b60006117948383611779565b60208301905092915050565b6000602082019050919050565b60006117b88261171b565b6117c28185611726565b93506117cd83611737565b8060005b838110156117fe5781516117e58882611788565b97506117f0836117a0565b9250506001810190506117d1565b5085935050505092915050565b6000602082019050818103600083015261182581846117ad565b905092915050565b60008115159050919050565b6118428161182d565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611882578082015181840152602081019050611867565b60008484015250505050565b600061189982611848565b6118a38185611853565b93506118b3818560208601611864565b6118bc81611596565b840191505092915050565b60006040820190506118dc6000830185611839565b81810360208301526118ee818461188e565b90509392505050565b61190081611767565b811461190b57600080fd5b50565b60008135905061191d816118f7565b92915050565b60006020828403121561193957611938611529565b5b60006119478482850161190e565b91505092915050565b600067ffffffffffffffff82111561196b5761196a6115a7565b5b602082029050602081019050919050565b600080fd5b600061199461198f84611950565b611607565b905080838252602082019050602084028301858111156119b7576119b661197c565b5b835b818110156119e057806119cc888261190e565b8452602084019350506020810190506119b9565b5050509392505050565b600082601f8301126119ff576119fe61158c565b5b8135611a0f848260208601611981565b91505092915050565b600067ffffffffffffffff821115611a3357611a326115a7565b5b602082029050602081019050919050565b6000611a57611a5284611a18565b611607565b90508083825260208201905060208402830185811115611a7a57611a7961197c565b5b835b81811015611aa35780611a8f888261154a565b845260208401935050602081019050611a7c565b5050509392505050565b600082601f830112611ac257611ac161158c565b5b8135611ad2848260208601611a44565b91505092915050565b60008060408385031215611af257611af1611529565b5b600083013567ffffffffffffffff811115611b1057611b0f61152e565b5b611b1c858286016119ea565b925050602083013567ffffffffffffffff811115611b3d57611b3c61152e565b5b611b4985828601611aad565b9150509250929050565b611b5c81611767565b82525050565b6000602082019050611b776000830184611b53565b92915050565b611b86816114eb565b82525050565b604082016000820151611ba26000850182611b7d565b506020820151611bb56020850182611779565b50505050565b6000604082019050611bd06000830184611b8c565b92915050565b6000819050919050565b611be981611bd6565b82525050565b600060ff82169050919050565b611c0581611bef565b82525050565b6000604082019050611c206000830185611be0565b611c2d6020830184611bfc565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b604082016000820151611c766000850182611b7d565b506020820151611c896020850182611779565b50505050565b6000611c9b8383611c60565b60408301905092915050565b6000602082019050919050565b6000611cbf82611c34565b611cc98185611c3f565b9350611cd483611c50565b8060005b83811015611d05578151611cec8882611c8f565b9750611cf783611ca7565b925050600181019050611cd8565b5085935050505092915050565b60006020820190508181036000830152611d2c8184611cb4565b905092915050565b611d3d81611bd6565b8114611d4857600080fd5b50565b600081359050611d5a81611d34565b92915050565b60008060408385031215611d7757611d76611529565b5b6000611d858582860161154a565b9250506020611d9685828601611d4b565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611dd581611bd6565b82525050565b60a082016000820151611df16000850182611dcc565b506020820151611e046020850182611b7d565b506040820151611e176040850182611b7d565b506060820151611e2a6060850182611779565b506080820151611e3d6080850182611b7d565b50505050565b6000611e4f8383611ddb565b60a08301905092915050565b6000602082019050919050565b6000611e7382611da0565b611e7d8185611dab565b9350611e8883611dbc565b8060005b83811015611eb9578151611ea08882611e43565b9750611eab83611e5b565b925050600181019050611e8c565b5085935050505092915050565b60006020820190508181036000830152611ee08184611e68565b905092915050565b600081905092915050565b50565b6000611f03600083611ee8565b9150611f0e82611ef3565b600082019050919050565b6000611f2482611ef6565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611f68826114eb565b9150611f73836114eb565b9250828203905081811115611f8b57611f8a611f2e565b5b92915050565b6000604082019050611fa660008301856114f5565b611fb36020830184611b53565b9392505050565b600082825260208201905092915050565b7f75736572206973206e6f742061646d696e000000000000000000000000000000600082015250565b6000612001601183611fba565b915061200c82611fcb565b602082019050919050565b6000602082019050818103600083015261203081611ff4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612071826114eb565b915061207c836114eb565b925082820190508082111561209457612093611f2e565b5b92915050565b60006120a5826114eb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036120d7576120d6611f2e565b5b600182019050919050565b6000819050919050565b6000819050919050565b600061211161210c612107846120e2565b6120ec565b6114eb565b9050919050565b612121816120f6565b82525050565b600060a08201905061213c6000830188611be0565b61214960208301876114f5565b6121566040830186612118565b6121636060830185611b53565b61217060808301846114f5565b9695505050505050565b600069ffffffffffffffffffff82169050919050565b6121998161217a565b81146121a457600080fd5b50565b6000815190506121b681612190565b92915050565b6000815190506121cb81611d34565b92915050565b6000815190506121e081611533565b92915050565b600080600080600060a0868803121561220257612201611529565b5b6000612210888289016121a7565b9550506020612221888289016121bc565b9450506040612232888289016121d1565b9350506060612243888289016121d1565b9250506080612254888289016121a7565b9150509295509295909350565b61226a81611bef565b811461227557600080fd5b50565b60008151905061228781612261565b92915050565b6000602082840312156122a3576122a2611529565b5b60006122b184828501612278565b9150509291505056fea26469706673582212200768991ff83cbfe0fd5c0fde367ec0b42f60d6639342c013d71801474896135164736f6c63430008110033";

type PredictionContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PredictionContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PredictionContract__factory extends ContractFactory {
  constructor(...args: PredictionContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    addresses: PromiseOrValue<string>[],
    entranceFee: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PredictionContract> {
    return super.deploy(
      addresses,
      entranceFee,
      interval,
      overrides || {}
    ) as Promise<PredictionContract>;
  }
  override getDeployTransaction(
    addresses: PromiseOrValue<string>[],
    entranceFee: PromiseOrValue<BigNumberish>,
    interval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      addresses,
      entranceFee,
      interval,
      overrides || {}
    );
  }
  override attach(address: string): PredictionContract {
    return super.attach(address) as PredictionContract;
  }
  override connect(signer: Signer): PredictionContract__factory {
    return super.connect(signer) as PredictionContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PredictionContractInterface {
    return new utils.Interface(_abi) as PredictionContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PredictionContract {
    return new Contract(address, _abi, signerOrProvider) as PredictionContract;
  }
}
