/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace PredictionContract {
  export type ContestStruct = {
    id: PromiseOrValue<BigNumberish>;
    priceFeedAddress: PromiseOrValue<string>;
  };

  export type ContestStructOutput = [BigNumber, string] & {
    id: BigNumber;
    priceFeedAddress: string;
  };

  export type PredictionStruct = {
    predictedValue: PromiseOrValue<BigNumberish>;
    predictedAt: PromiseOrValue<BigNumberish>;
    difference: PromiseOrValue<BigNumberish>;
    user: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type PredictionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    predictedValue: BigNumber;
    predictedAt: BigNumber;
    difference: BigNumber;
    user: string;
    amount: BigNumber;
  };
}

export interface PredictionContractInterface extends utils.Interface {
  functions: {
    "checkUpkeep(bytes)": FunctionFragment;
    "getContest(uint256)": FunctionFragment;
    "getDistributionAmount(uint256)": FunctionFragment;
    "getEntranceFee()": FunctionFragment;
    "getInterval()": FunctionFragment;
    "getLatestPrice(uint256)": FunctionFragment;
    "getLatestTimeStamp()": FunctionFragment;
    "getNumOfContests()": FunctionFragment;
    "getPredictions(uint256)": FunctionFragment;
    "getResult(uint256)": FunctionFragment;
    "getRewardArray(uint256)": FunctionFragment;
    "getTotalBalance(uint256)": FunctionFragment;
    "performUpkeep(bytes)": FunctionFragment;
    "predict(uint256,int256)": FunctionFragment;
    "setDifference(uint256)": FunctionFragment;
    "setRewardArray(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkUpkeep"
      | "getContest"
      | "getDistributionAmount"
      | "getEntranceFee"
      | "getInterval"
      | "getLatestPrice"
      | "getLatestTimeStamp"
      | "getNumOfContests"
      | "getPredictions"
      | "getResult"
      | "getRewardArray"
      | "getTotalBalance"
      | "performUpkeep"
      | "predict"
      | "setDifference"
      | "setRewardArray"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEntranceFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestTimeStamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumOfContests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPredictions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getResult",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardArray",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBalance",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "predict",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDifference",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardArray",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getContest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntranceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumOfContests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPredictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getResult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "predict", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDifference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardArray",
    data: BytesLike
  ): Result;

  events: {
    "ContestCancelled(uint256)": EventFragment;
    "ContestCompleted(uint256)": EventFragment;
    "NewPrediction(int256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContestCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContestCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPrediction"): EventFragment;
}

export interface ContestCancelledEventObject {
  contestId: BigNumber;
}
export type ContestCancelledEvent = TypedEvent<
  [BigNumber],
  ContestCancelledEventObject
>;

export type ContestCancelledEventFilter =
  TypedEventFilter<ContestCancelledEvent>;

export interface ContestCompletedEventObject {
  contestId: BigNumber;
}
export type ContestCompletedEvent = TypedEvent<
  [BigNumber],
  ContestCompletedEventObject
>;

export type ContestCompletedEventFilter =
  TypedEventFilter<ContestCompletedEvent>;

export interface NewPredictionEventObject {
  predictedValue: BigNumber;
  predictedAt: BigNumber;
  difference: BigNumber;
  user: string;
}
export type NewPredictionEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  NewPredictionEventObject
>;

export type NewPredictionEventFilter = TypedEventFilter<NewPredictionEvent>;

export interface PredictionContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PredictionContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { upkeepNeeded: boolean }>;

    getContest(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PredictionContract.ContestStructOutput]>;

    getDistributionAmount(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEntranceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLatestPrice(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number]>;

    getLatestTimeStamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNumOfContests(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPredictions(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[PredictionContract.PredictionStructOutput[]]>;

    getResult(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRewardArray(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTotalBalance(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    predict(
      contestId: PromiseOrValue<BigNumberish>,
      _predictedValue: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDifference(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardArray(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  checkUpkeep(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { upkeepNeeded: boolean }>;

  getContest(
    contestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PredictionContract.ContestStructOutput>;

  getDistributionAmount(
    contestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEntranceFee(overrides?: CallOverrides): Promise<BigNumber>;

  getInterval(overrides?: CallOverrides): Promise<BigNumber>;

  getLatestPrice(
    contestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, number]>;

  getLatestTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

  getNumOfContests(overrides?: CallOverrides): Promise<BigNumber>;

  getPredictions(
    contestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PredictionContract.PredictionStructOutput[]>;

  getResult(
    contestId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRewardArray(
    contestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTotalBalance(
    contestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  performUpkeep(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  predict(
    contestId: PromiseOrValue<BigNumberish>,
    _predictedValue: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDifference(
    contestId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardArray(
    contestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { upkeepNeeded: boolean }>;

    getContest(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PredictionContract.ContestStructOutput>;

    getDistributionAmount(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntranceFee(overrides?: CallOverrides): Promise<BigNumber>;

    getInterval(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestPrice(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number]>;

    getLatestTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    getNumOfContests(overrides?: CallOverrides): Promise<BigNumber>;

    getPredictions(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PredictionContract.PredictionStructOutput[]>;

    getResult(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRewardArray(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTotalBalance(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    predict(
      contestId: PromiseOrValue<BigNumberish>,
      _predictedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDifference(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardArray(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ContestCancelled(uint256)"(contestId?: null): ContestCancelledEventFilter;
    ContestCancelled(contestId?: null): ContestCancelledEventFilter;

    "ContestCompleted(uint256)"(contestId?: null): ContestCompletedEventFilter;
    ContestCompleted(contestId?: null): ContestCompletedEventFilter;

    "NewPrediction(int256,uint256,uint256,address)"(
      predictedValue?: null,
      predictedAt?: null,
      difference?: null,
      user?: null
    ): NewPredictionEventFilter;
    NewPrediction(
      predictedValue?: null,
      predictedAt?: null,
      difference?: null,
      user?: null
    ): NewPredictionEventFilter;
  };

  estimateGas: {
    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContest(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDistributionAmount(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEntranceFee(overrides?: CallOverrides): Promise<BigNumber>;

    getInterval(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestPrice(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestTimeStamp(overrides?: CallOverrides): Promise<BigNumber>;

    getNumOfContests(overrides?: CallOverrides): Promise<BigNumber>;

    getPredictions(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getResult(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRewardArray(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalBalance(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    predict(
      contestId: PromiseOrValue<BigNumberish>,
      _predictedValue: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDifference(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardArray(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContest(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDistributionAmount(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEntranceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestPrice(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestTimeStamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumOfContests(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPredictions(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getResult(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRewardArray(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalBalance(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    performUpkeep(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    predict(
      contestId: PromiseOrValue<BigNumberish>,
      _predictedValue: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDifference(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardArray(
      contestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
